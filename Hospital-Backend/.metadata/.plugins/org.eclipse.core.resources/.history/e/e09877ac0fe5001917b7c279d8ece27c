package com.gregory.hospitalapp.controller;



import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


import com.gregory.hospitalapp.model.Medico;

import com.gregory.hospitalapp.dao.interfaces.*;


@CrossOrigin(origins  = "http://localhost:4200")
@RestController
@RequestMapping("/medicos")
public class MedicoController {
	
	@Autowired
	private MedicoDao medicoDao;
	
	
	@RequestMapping(value="/cadastrarMedico", method = RequestMethod.GET)
	public String save() {
		return "medicos/inserir";
	}
	
	@RequestMapping(value="/cadastrarMedico",produces = MediaType.APPLICATION_JSON_VALUE, method = RequestMethod.POST)
	public ResponseEntity<?> save(@RequestBody Medico medico) {
		
		try {
			Medico medicoModel = medicoDao.findByUsername(medico.getNum_regi());
			if(medicoModel!=null) {
				return new ResponseEntity<Object>(HttpStatus.FORBIDDEN);
			}
					
			medicoModel = medicoDao.save(medico);
			return new ResponseEntity<>(medicoModel, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@RequestMapping(value="/{id}", method = RequestMethod.DELETE)
	public void remove(@PathVariable long id) {
		Medico medico = (Medico) medicoDao.findOne(id);
		medicoDao.delete(medico);
		
	}
	
	private List<Medico> medicos = listarMedicos();

	
	@DeleteMapping(path = {"/{id}"})
	public Medico delete(@PathVariable("id") long id) {
		Medico deleteMed = null;
		for(Medico med: medicos) {
			if (med.getID_MEDICO()==id) {
				medicos.remove(med);
				deleteMed = med;
				break;
			}
		}
		return deleteMed;
	}
	
	
	@RequestMapping("/listarMedico")
	public List<Medico> listarMedicos() {
		List<Medico> Medicolist = (List<Medico>) medicoDao.findMedico();
		return Medicolist;
	}
	

	
}